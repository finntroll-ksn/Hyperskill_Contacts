type: edu
custom_name: stage4
files:
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import contacts.Main;\nimport org.hyperskill.hstest.stage.StageTest;\nimport\
    \ org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testcase.TestCase;\n\
    \nimport java.util.List;\nimport java.util.function.Function;\n\n\nclass TestClue\
    \ {\n\n    Function<String, CheckResult> callback;\n\n    TestClue(Function<String,\
    \ CheckResult> callback) {\n        this.callback = callback;\n    }\n}\n\n\n\
    public class ContactsTest extends StageTest<TestClue> {\n\n    public ContactsTest()\
    \ {\n        super(Main.class);\n    }\n    private CheckResult splitActionsFeedback(int\
    \ actualSize, int needSize) {\n        if (actualSize < needSize) {\n        \
    \    return CheckResult.wrong(String.format(\"This test should contain at least\
    \ %d actions, but you have only %d. \" +\n                            \"You should\
    \ separate your actions with an empty line.\",\n                    needSize,\n\
    \                    actualSize));\n        } else {\n            return null;\n\
    \        }\n    }\n    \n    @Override\n    public List<TestCase<TestClue>> generate()\
    \ {\n        return List.of (\n            new TestCase<TestClue>()\n        \
    \        .setInput(\"exit\")\n                .setAttach(new TestClue(output ->\
    \ {\n                    output = output.strip().toLowerCase();\n            \
    \        if (!output.contains(\"enter action\")) {\n                        return\
    \ new CheckResult(false,\n                            \"No \\\"Enter action\\\"\
    \ substring found in the output\");\n                    }\n                 \
    \   return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"count\\n\" +\n            \
    \        \"exit\")\n                .setAttach(new TestClue(output -> {\n    \
    \                output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"0 records\")) {\n                        return new CheckResult(false,\n\
    \                            \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"count\\n\"\
    \ +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (output.contains(\"0 records\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Can't add the person\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ [no data]\")\n                                && infoBlock.contains(\"Number:\
    \ 123 456 789\")\n                                && infoBlock.contains(\"Time\
    \ created:\")\n                                && infoBlock.contains(\"Time last\
    \ edit:\")) {\n                            return CheckResult.correct();\n   \
    \                     }\n                    }\n                    return new\
    \ CheckResult(false,\n                            \"Something wrong with printing\
    \ user info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n\n                    for (String\
    \ infoBlock : blocks) {\n                        if (infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St. 1\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Something wrong with printing\
    \ organization info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"list\\n\" +\n                    \"1\\n\" +\n               \
    \     \"edit\\n\" +\n                        \"gender\\n\" +\n               \
    \         \"M\\n\" +\n                    \"menu\\n\" +\n                    \"\
    list\\n\" +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ M\")\n                                && infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                                && infoBlock.contains(\"Time created:\"\
    )\n                                && infoBlock.contains(\"Time last edit:\"))\
    \ {\n                            return CheckResult.correct();\n             \
    \           }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Editing person is not working\");\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"organization\\n\"\
    \ +\n                        \"Pizza Shop\\n\" +\n                        \"Wall\
    \ St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n     \
    \               \"list\\n\" +\n                    \"1\\n\" +\n              \
    \      \"edit\\n\" +\n                        \"address\\n\" +\n             \
    \           \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n          \
    \          \"list\\n\" +\n                    \"1\\n\" +\n                   \
    \ \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Organization name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St 2\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Editing organization is\
    \ not working\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"add\\n\" +\n                    \
    \    \"person\\n\" +\n                        \"John\\n\" +\n                \
    \        \"Smith\\n\" +\n                        \"\\n\" +\n                 \
    \       \"\\n\" +\n                        \"123 456 789\\n\" +\n            \
    \        \"add\\n\" +\n                        \"organization\\n\" +\n       \
    \                 \"PizzaNuts\\n\" +\n                        \"Wall St. 6\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"search\\n\" +\n                        \"pizz\\n\" +\n                \
    \    \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 4);\n              \
    \      if (feedback != null) return feedback;\n    \n                    \n  \
    \                  for (String infoBlock : blocks) {\n                       \
    \ if (infoBlock.contains(\"Pizza Shop\")\n                                && infoBlock.contains(\"\
    PizzaNuts\")\n                                && !infoBlock.contains(\"John\"\
    )) {\n                            return CheckResult.correct();\n            \
    \            }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"organization\\n\" +\n    \
    \                    \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\\
    n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n              \
    \      \"add\\n\" +\n                        \"person\\n\" +\n               \
    \         \"John\\n\" +\n                        \"Smith\\n\" +\n            \
    \            \"\\n\" +\n                        \"\\n\" +\n                  \
    \      \"123 456 789\\n\" +\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"PizzaNuts\\n\" +\n\
    \                        \"Wall St. 6\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"search\\n\" +\n                 \
    \       \"s\\n\" +\n                    \"1\\n\" +\n                    \"menu\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Pizza Shop\")\n                                && infoBlock.contains(\"John Smith\"\
    )\n                                && infoBlock.contains(\"PizzaNuts\")) {\n \
    \                           return CheckResult.correct();\n                  \
    \      }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n        new TestCase<TestClue>()\n            .setInput(\n                \"\
    add\\n\" +\n                    \"organization\\n\" +\n                    \"\
    Pizza Shop\\n\" +\n                    \"Wall St. 1\\n\" +\n                 \
    \   \"+0 (123) 456-789-9999\\n\" +\n                \"add\\n\" +\n           \
    \         \"person\\n\" +\n                    \"John\\n\" +\n               \
    \     \"Smith\\n\" +\n                    \"\\n\" +\n                    \"\\\
    n\" +\n                    \"123 456 789\\n\" +\n                \"add\\n\" +\n\
    \                    \"organization\\n\" +\n                    \"PizzaNuts\\\
    n\" +\n                    \"Wall St. 6\\n\" +\n                    \"+0 (123)\
    \ 456-781-9999\\n\" +\n                \"search\\n\" +\n                    \"\
    789\\n\" +\n                \"1\\n\" +\n                \"menu\\n\" +\n      \
    \          \"exit\")\n            .setAttach(new TestClue(output -> {\n      \
    \          String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                var feedback = splitActionsFeedback(blocks.length, 4);\n \
    \               if (feedback != null) return feedback;\n\n                for\
    \ (String infoBlock : blocks) {\n                    if (infoBlock.contains(\"\
    Pizza Shop\")\n                            && infoBlock.contains(\"John Smith\"\
    )\n                            && !infoBlock.contains(\"PizzaNuts\")) {\n    \
    \                    return CheckResult.correct();\n\n                    }\n\
    \                }\n                return new CheckResult(false,\n          \
    \              \"Search by phone number is not working\");\n            }))\n\
    \        );\n    }\n\n    @Override\n    public CheckResult check(String reply,\
    \ TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/Contact.java
  visible: true
  text: |
    package contacts;

    import java.util.ArrayList;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Contact {
        private String phone = "[no number]";
        private String creationDate;
        private String lastEditDate;

        public Contact() {
        }

        public void getAllFields() {
        }

        public ArrayList<String> getAllItemField() {
            return null;
        }

        public void changeField(String field, String volume) {
        }

        public String getField(String field) {
            switch (field) {
                case "phone":
                    return this.getPhone();
                case "creationDate":
                    return this.getCreationDate();
                case "lastEditDate":
                    return this.getLastEditDate();
                default:
                    return null;
            }
        }

        private boolean checkPhoneNumber(String phoneNumber) {
            Pattern pattern = Pattern.compile("^\\+?([\\da-zA-Z]+[\\s-]?)?(\\([\\da-zA-Z]{2,}(\\)[\\s-]|\\)$))?([\\da-zA-Z]{2,}[\\s-]?)*([\\da-zA-Z]{2,})?$");
            Matcher matcher = pattern.matcher(phoneNumber);

            return matcher.matches();
        }

        public String getPhone() {
            return phone;
        }

        public void setPhone(String phone) {
            if (checkPhoneNumber(phone)) {
                this.phone = phone;
            } else {
                System.out.println("Wrong number format!");
                this.phone = "[no number]";
            }
        }

        public String getCreationDate() {
            return creationDate;
        }

        public void setCreationDate(String creationDate) {
            this.creationDate = creationDate;
        }

        public String getLastEditDate() {
            return lastEditDate;
        }

        public void setLastEditDate(String lastEditDate) {
            this.lastEditDate = lastEditDate;
        }
    }
  learner_created: true
- name: src/contacts/PhoneBook.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDateTime;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class PhoneBook {
        private Scanner scanner = new Scanner(System.in);
        private List<Contact> contacts = new ArrayList<>();

        public void addContact(Contact contact) {
            contacts.add(contact);
        }

        public void getList() {
            if (contacts.size() == 0) {
                System.out.println("We have no elements");
                System.out.println();

                return;
            }

            String output;
            int i = 1;

            for (Contact contact : contacts) {
                if (contact.getClass() == Person.class) {
                    output = contact.getField("name") + " " + contact.getField("surname");
                } else {
                    output = contact.getField("name");
                }

                System.out.println(i + ". " + output);
                i++;
            }
        }

        public void removeContact(int nextInt) {
            contacts.remove(nextInt - 1);
        }

        public int getListSize() {
            return contacts.size();
        }

        public void infoElements(int id) {
            contacts.get(--id).getAllFields();

            System.out.println();
        }

        public Contact getContact(int id) {
            return contacts.get(--id);
        }

        public void init() {
            while (true) {
                System.out.println("Enter action (add, remove, edit, count, info, exit): ");
                String input = scanner.nextLine();
                Contact contact;

                switch (input) {
                    case "add":
                        addElement();
                        break;
                    case "remove":
                        if (getListSize() != 0) {
                            getList();

                            System.out.println("Select a record: ");
                            removeContact(Integer.parseInt(scanner.nextLine()));

                            System.out.println("The record removed!");
                        } else {
                            System.out.println("No records to remove!");
                        }
                        break;
                    case "edit":
                        if (getListSize() != 0) {
                            getList();

                            System.out.println("Select a record: ");
                            int index = Integer.parseInt(scanner.nextLine());
                            contact = getContact(index);
                            editElements(contact);

                            System.out.println("The record updated!");
                        } else {
                            System.out.println("No records to edit!");
                        }
                        break;
                    case "count":
                        countElements();
                        break;
                    case "info":
                        getList();

                        System.out.println("Enter index to show info:");

                        int index = Integer.parseInt(scanner.nextLine());
                        infoElements(index);
                        break;
                    case "exit":
                        return;
                }
            }
        }

        public void addElement() {
            System.out.print("Enter the type (person, organization): ");
            String type = scanner.nextLine();

            switch (type) {
                case ("person"):
                    addPerson();
                    break;
                case ("organization"):
                    addOrganization();
                    break;
            }

            System.out.println("A record added!");
            System.out.println();
        }

        public void addPerson() {
            Person element = new Person();

            System.out.print("Enter the name: ");
            String name = scanner.nextLine();
            element.setName(name);

            System.out.print("Enter the surname: ");
            String surname = scanner.nextLine();
            element.setSurname(surname);

            System.out.print("Enter the birth date: ");
            String inputDay = scanner.nextLine();
            element.setBirthDay(inputDay);

            System.out.print("Enter the gender (M, F): ");
            String gender = scanner.nextLine();
            element.setGender(gender);

            System.out.print("Enter the number: ");
            String phone = scanner.nextLine();
            element.setPhone(phone);

            element.setCreationDate(String.valueOf(LocalDateTime.now()));
            element.setLastEditDate(String.valueOf(LocalDateTime.now()));

            addContact(element);
        }

        public void addOrganization() {
            Organization element = new Organization();

            System.out.print("Enter the organization name: ");
            String brand = scanner.nextLine();
            element.setBrand(brand);

            System.out.print("Enter the address: ");
            String address = scanner.nextLine();
            element.setAddress(address);

            System.out.print("Enter the number: ");
            String phone = scanner.nextLine();
            element.setPhone(phone);

            element.setCreationDate(String.valueOf(LocalDateTime.now()));
            element.setLastEditDate(String.valueOf(LocalDateTime.now()));

            addContact(element);
        }

        public void countElements() {
            System.out.println("The Phone Book has " + getListSize() + " records.");
            System.out.println();
        }

        public void editElements(Contact contact) {
            if (contact.getClass() == Person.class) {
                System.out.print("Select a field (name, surname, number): ");
                String field = scanner.nextLine();

                switch (field) {
                    case ("name"):
                        System.out.print("Enter name: ");
                        ((Person) contact).setName(scanner.nextLine());
                        break;
                    case ("surname"):
                        System.out.print("Enter surname: ");
                        ((Person) contact).setSurname(scanner.nextLine());
                        break;
                    case ("birth"):
                        System.out.print("Enter birth: ");
                        String birthDay = scanner.nextLine();
                        ((Person) contact).setBirthDay(birthDay);
                        break;
                    case ("gender"):
                        System.out.print("Enter gender: ");
                        String gender = scanner.nextLine();
                        ((Person) contact).setGender(gender);
                        break;
                    case ("number"):
                        System.out.print("Enter number: ");
                        String number = scanner.nextLine();
                        contact.setPhone(number);
                        break;
                }
            } else {
                System.out.print("Select a field (name, address, number): ");
                String field = scanner.nextLine();

                switch (field) {
                    case ("name"):
                        System.out.print("Enter the organization name: ");
                        ((Organization) contact).setBrand(scanner.nextLine());
                        break;
                    case ("address"):
                        System.out.print("Enter the address: ");
                        ((Organization) contact).setAddress(scanner.nextLine());
                        break;
                    case ("number"):
                        System.out.print("Enter number: ");
                        String phone = scanner.nextLine();
                        contact.setPhone(phone);
                        break;
                }
            }

            contact.setLastEditDate(String.valueOf(LocalDateTime.now()));
            System.out.println("Saved");

            contact.getAllFields();
            System.out.println();
        }
    }
  learner_created: true
- name: src/contacts/Organization.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDateTime;

    public class Organization extends Contact {
        private String brand;
        private String address;

        public Organization() {
        }

        @Override
        public void getAllFields() {
            System.out.println("Organization name: " + this.getBrand());
            System.out.println("Address: " + this.getAddress());
            System.out.println("Number: " + this.getPhone());
            System.out.println("Time created: " + this.getCreationDate().substring(0, 16));
            System.out.println("Time last edit: " + this.getLastEditDate().substring(0, 16));
        }

        @Override
        public void changeField(String field, String volume) {
            super.changeField(field, volume);
            switch (field) {
                case ("name"):
                    this.setBrand(volume);
                    break;
                case ("address"):
                    this.setAddress(volume);
                    break;
                case ("number"):
                    this.setPhone(volume);
                    break;
            }

            this.setLastEditDate(String.valueOf(LocalDateTime.now()));
        }

        @Override
        public String getField(String field) {
            switch (field) {
                case ("name"):
                    return this.getBrand();
                case ("address"):
                    return this.getAddress();
                case "phone":
                    return this.getPhone();
                case "creationDate":
                    return this.getCreationDate();
                case "lastEditDate":
                    return this.getLastEditDate();

                default:
                    return null;
            }
        }

        public String getBrand() {
            return brand;
        }

        public void setBrand(String brand) {
            this.brand = brand;
        }

        public String getAddress() {
            return address;
        }

        public void setAddress(String address) {
            this.address = address;
        }
    }
  learner_created: true
- name: src/contacts/Person.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDate;
    import java.time.LocalDateTime;

    public class Person extends Contact {
        private String name;
        private String surname;
        private String birthDay = "[no data]";
        private String gender = "[no data]";

        public Person() {
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getSurname() {
            return surname;
        }

        public void setSurname(String surname) {
            this.surname = surname;
        }

        public String getBirthDay() {
            return birthDay;
        }

        public void setBirthDay(String birthDay) {
            try {
                this.birthDay = String.valueOf(LocalDate.parse(birthDay));
            } catch (Exception e) {
                System.out.println("Bad birth date!");
                this.birthDay = "[no data]";
            }
        }

        public String getGender() {
            return gender;
        }

        public void setGender(String gender) {
            if (!gender.equals("M") && !gender.equals("F")) {
                System.out.println("Bad gender!");
                this.gender = "[no data]";
            } else {
                this.gender = gender;
            }
        }

        @Override
        public void getAllFields() {
            System.out.println("Name: " + this.getName());
            System.out.println("Surname: " + this.getSurname());
            System.out.println("Birth date: " + this.getBirthDay());
            System.out.println("Gender: " + this.getGender());
            System.out.println("Number: " + this.getPhone());
            System.out.println("Time created: " + this.getCreationDate().substring(0, 16));
            System.out.println("Time last edit: " + this.getLastEditDate().substring(0, 16));
        }

        @Override
        public void changeField(String field, String volume) {
            switch (field) {
                case ("name"):
                    this.setName(volume);
                    break;
                case ("surname"):
                    this.setSurname(volume);
                    break;
                case ("birth"):
                    this.setBirthDay(volume);
                    break;
                case ("gender"):
                    this.setGender(volume);
                    break;
                case ("number"):
                    this.setPhone(volume);
                    break;
            }

            this.setLastEditDate(String.valueOf(LocalDateTime.now()));
        }

        @Override
        public String getField(String field) {
            switch (field) {
                case ("name"):
                    return this.getName();
                case ("surname"):
                    return this.getSurname();
                case ("birth"):
                    return this.getBirthDay();
                case ("gender"):
                    return this.getGender();
                case "phone":
                    return this.getPhone();
                case "creationDate":
                    return this.getCreationDate();
                case "lastEditDate":
                    return this.getLastEditDate();

                default:
                    return null;
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/43/stages/231/implement
status: Solved
record: -1
